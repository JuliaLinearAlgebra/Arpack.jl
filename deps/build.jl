using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libarpack"], :libarpack),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaLinearAlgebra/ArpackBuilder/releases/download/v3.5.0-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ArpackBuilder.v3.5.0-1.aarch64-linux-gnu.tar.gz",
         "fbc90f1888cfb6129de3177fb1a403c8e98a2bf723b776b00f2fe86cdbcbe312"),
    Linux(:aarch64, :musl) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.aarch64-linux-musl.tar.gz",
         "be2d588b311bede816b147acf52cc33f1f5179682776105af815c3c6bff85b6c"),
    Linux(:armv7l, :glibc, :eabihf) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.arm-linux-gnueabihf.tar.gz",
         "33c5b57c4e09c1c10d5e9dd86ec93dfcd4eef8fcb37c38faee4651119feb681d"),
    Linux(:armv7l, :musl, :eabihf) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.arm-linux-musleabihf.tar.gz",
         "32fad1158ffa4072a1dfd053071f39e6a83e913808d8923628b0b1c461e87c10"),
    Linux(:i686, :glibc) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.i686-linux-gnu.tar.gz",
         "cab4dbeffeb00fedf3ea17b468d3ec21bfedb9b51896af13a6fe9ce99dbc5a6c"),
    Linux(:i686, :musl) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.i686-linux-musl.tar.gz",
         "3344a7040f7d07a6a2e39aad92548d922c1d8f8b927d8fa95d6ea6f25f954ab4"),
    Windows(:i686) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.i686-w64-mingw32.tar.gz",
         "5d4f7ad7025a2cb14c55a89f9794cb110217e2a1ea8d08204e6b92dbeca5f8b1"),
    Linux(:powerpc64le, :glibc) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.powerpc64le-linux-gnu.tar.gz",
         "bf166cbd5e2b529125f24ef87d172f921f9b413c07d94bbf300f7bd3a87452d9"),
    MacOS(:x86_64) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.x86_64-apple-darwin14.tar.gz",
         "df0b412a0465b9ff3a1fa3157e5a21a91a0341a2c92706fefa1206d24bddc314"),
    Linux(:x86_64, :glibc) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.x86_64-linux-gnu.tar.gz",
         "b6386067cf15fc58336ecb32f9c682b4ea8772a16abde2388c619be5e9197b9c"),
    Linux(:x86_64, :musl) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.x86_64-linux-musl.tar.gz",
         "53d65e5ea9d6451e0c51486241dce6229ac6e930cd5ee111e88598a7c15e3e62"),
    FreeBSD(:x86_64) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.x86_64-unknown-freebsd11.1.tar.gz",
         "2f4bed9cdb5d70354f18d846d2aa6d85c5fd9b68056cce8f1044dea46e640ae1"),
    Windows(:x86_64) =>
        ("$bin_prefix/ArpackBuilder.v3.5.0-1.x86_64-w64-mingw32.tar.gz",
         "ad96a482f85d0d9321b774d81b4ae70353818d627e1298ae2acd2335e2ba5f9d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
